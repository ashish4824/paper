name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests
        run: npm test
        
      - name: Build application
        run: npm run build
        
      - name: Prepare application files
        run: |
          mkdir -p deploy/
          cp -r app/* deploy/
          cp package.json deploy/
          cp -r node_modules deploy/ || true
        
      - name: Upload application files
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: deploy/
  
  terraform-validate:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform
        
      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, terraform-validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      
      - name: Create deployment directory
        run: mkdir -p deploy/

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: app-build
          path: deploy/
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          pip install boto3
          pip install ibm-cloud-sdk-core
      
      - name: Generate Ansible inventory
        run: |
          echo "[aws]" > inventory.ini
          terraform output -raw aws_instance_ip >> inventory.ini
          echo "[ibm]" >> inventory.ini
          terraform output -raw ibm_instance_ip >> inventory.ini
        working-directory: ./terraform
      
      - name: Run Ansible playbooks
        run: |
          ansible-playbook -i terraform/inventory.ini ansible/playbooks/setup.yml
          ansible-playbook -i terraform/inventory.ini ansible/playbooks/monitoring.yml
          ansible-playbook -i terraform/inventory.ini ansible/playbooks/deploy.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}